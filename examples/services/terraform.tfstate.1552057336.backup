{
    "version": 3,
    "terraform_version": "0.11.11",
    "serial": 8,
    "lineage": "68bb1c3d-919d-f6ae-fd8a-db393d4e691e",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                "kubernetes_namespace.namespace": {
                    "type": "kubernetes_namespace",
                    "depends_on": [],
                    "primary": {
                        "id": "axxonet",
                        "attributes": {
                            "id": "axxonet",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "1",
                            "metadata.0.annotations.name": "axxonet",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "axxonet",
                            "metadata.0.resource_version": "9620",
                            "metadata.0.self_link": "/api/v1/namespaces/axxonet",
                            "metadata.0.uid": "b5ca3cb8-40e9-11e9-a5e6-42010a84027b"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "gather"
            ],
            "outputs": {},
            "resources": {
                "data.template_file.override": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "a925e7eb8bf9c00336906b32cc35756982fa5f254b7b6edb1ae7432386eb819c",
                        "attributes": {
                            "id": "a925e7eb8bf9c00336906b32cc35756982fa5f254b7b6edb1ae7432386eb819c",
                            "rendered": "# Kaduna override for Gather.\ngather:\n  repository: \"ehealthafrica/gather\"\nenvironment: prod\nprovider:\n  aws: false\n  gcp: true\ndomain: aether-dev.aether-axxonet.com\ntrusted_origins: gather.aether-dev.aether-axxonet.com\nservice:\n  type: NodePort\ningress:\n  certsecret: wildcard\n  hosts:\n    - gather.aether-dev.aether-axxonet.com\n  ssl:\n    letsencrypt: true\n    cert_secret: aether-dev.aether-axxonet.com\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    nginx.ingress.kubernetes.io/proxy-body-size: \"75M\"\n    kubernetes.io/tls-acme: \"true\"\n    certmanager.k8s.io/cluster-issuer: letsencrypt\n    certmanager.k8s.io/acme-challenge-type: dns01\n    certmanager.k8s.io/acme-dns01-provider: gcloud\naether_modules: odk,kernel\naether:\n  kernel:\n    secret: kernel-secrets\n    url: https://kernel.aether-dev.aether-axxonet.com\n  odk:\n    enabled: true\n    secret: odk-secrets\n    url: https://odk.aether-dev.aether-axxonet.com\napp:\n  db:\n    secret: database-credentials\n    user: gather\n    name: gather\ndatabase:\n  # set google sql instance name, e.g. modern-rex-207814:europe-west1:gatherdb-instance\n  instance: aether-dev-233810:europe-west1:aether-dev-233810-aether-dev-233810\n",
                            "template": "# Kaduna override for Gather.\ngather:\n  repository: \"ehealthafrica/gather\"\nenvironment: prod\nprovider:\n  aws: false\n  gcp: true\ndomain: ${project}.${domain}\ntrusted_origins: gather.${project}.${domain}\nservice:\n  type: NodePort\ningress:\n  certsecret: wildcard\n  hosts:\n    - gather.${project}.${domain}\n  ssl:\n    letsencrypt: true\n    cert_secret: ${project}.${domain}\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    nginx.ingress.kubernetes.io/proxy-body-size: \"75M\"\n    kubernetes.io/tls-acme: \"true\"\n    certmanager.k8s.io/cluster-issuer: letsencrypt\n    certmanager.k8s.io/acme-challenge-type: dns01\n    certmanager.k8s.io/acme-dns01-provider: ${dns_provider}\naether_modules: odk,kernel\naether:\n  kernel:\n    secret: kernel-secrets\n    url: https://kernel.${project}.${domain}\n  odk:\n    enabled: true\n    secret: odk-secrets\n    url: https://odk.${project}.${domain}\napp:\n  db:\n    secret: database-credentials\n    user: gather\n    name: gather\ndatabase:\n  # set google sql instance name, e.g. modern-rex-207814:europe-west1:gatherdb-instance\n  instance: ${database_instance_name}\n",
                            "vars.%": "6",
                            "vars.database_instance_name": "aether-dev-233810:europe-west1:aether-dev-233810-aether-dev-233810",
                            "vars.dns_provider": "gcloud",
                            "vars.domain": "aether-axxonet.com",
                            "vars.gcs_bucket_credentials": "",
                            "vars.gcs_bucket_name": "",
                            "vars.project": "aether-dev"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "helm_release.service": {
                    "type": "helm_release",
                    "depends_on": [
                        "data.template_file.override"
                    ],
                    "primary": {
                        "id": "gather",
                        "attributes": {
                            "chart": "eha/gather",
                            "disable_webhooks": "false",
                            "force_update": "false",
                            "id": "gather",
                            "metadata.#": "1",
                            "metadata.0.chart": "gather",
                            "metadata.0.name": "gather",
                            "metadata.0.namespace": "axxonet",
                            "metadata.0.revision": "2",
                            "metadata.0.values": "aether:\n  kernel:\n    secret: kernel-secrets\n    url: https://kernel.aether-dev.aether-axxonet.com\n  odk:\n    enabled: true\n    secret: odk-secrets\n    url: https://odk.aether-dev.aether-axxonet.com\naether_modules: odk,kernel\napp:\n  db:\n    name: gather\n    secret: database-credentials\n    user: gather\ndatabase:\n  instance: aether-dev-233810:europe-west1:aether-dev-233810-aether-dev-233810\ndomain: aether-dev.aether-axxonet.com\nenvironment: prod\ngather:\n  repository: ehealthafrica/gather\ningress:\n  annotations:\n    certmanager.k8s.io/acme-challenge-type: dns01\n    certmanager.k8s.io/acme-dns01-provider: gcloud\n    certmanager.k8s.io/cluster-issuer: letsencrypt\n    kubernetes.io/ingress.class: nginx\n    kubernetes.io/tls-acme: \"true\"\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    nginx.ingress.kubernetes.io/proxy-body-size: 75M\n  certsecret: wildcard\n  hosts:\n  - gather.aether-dev.aether-axxonet.com\n  ssl:\n    cert_secret: aether-dev.aether-axxonet.com\n    letsencrypt: true\nprovider:\n  aws: false\n  gcp: true\nservice:\n  type: NodePort\ntrusted_origins: gather.aether-dev.aether-axxonet.com\n",
                            "metadata.0.version": "3.1.0",
                            "name": "gather",
                            "namespace": "axxonet",
                            "recreate_pods": "false",
                            "reuse": "false",
                            "reuse_values": "false",
                            "status": "DEPLOYED",
                            "timeout": "300",
                            "values.#": "1",
                            "values.0": "# Kaduna override for Gather.\ngather:\n  repository: \"ehealthafrica/gather\"\nenvironment: prod\nprovider:\n  aws: false\n  gcp: true\ndomain: aether-dev.aether-axxonet.com\ntrusted_origins: gather.aether-dev.aether-axxonet.com\nservice:\n  type: NodePort\ningress:\n  certsecret: wildcard\n  hosts:\n    - gather.aether-dev.aether-axxonet.com\n  ssl:\n    letsencrypt: true\n    cert_secret: aether-dev.aether-axxonet.com\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    nginx.ingress.kubernetes.io/proxy-body-size: \"75M\"\n    kubernetes.io/tls-acme: \"true\"\n    certmanager.k8s.io/cluster-issuer: letsencrypt\n    certmanager.k8s.io/acme-challenge-type: dns01\n    certmanager.k8s.io/acme-dns01-provider: gcloud\naether_modules: odk,kernel\naether:\n  kernel:\n    secret: kernel-secrets\n    url: https://kernel.aether-dev.aether-axxonet.com\n  odk:\n    enabled: true\n    secret: odk-secrets\n    url: https://odk.aether-dev.aether-axxonet.com\napp:\n  db:\n    secret: database-credentials\n    user: gather\n    name: gather\ndatabase:\n  # set google sql instance name, e.g. modern-rex-207814:europe-west1:gatherdb-instance\n  instance: aether-dev-233810:europe-west1:aether-dev-233810-aether-dev-233810\n",
                            "verify": "false",
                            "version": "3.1.0",
                            "wait": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                },
                "helm_repository.eha": {
                    "type": "helm_repository",
                    "depends_on": [],
                    "primary": {
                        "id": "eha",
                        "attributes": {
                            "id": "eha",
                            "metadata.#": "1",
                            "metadata.0.name": "eha",
                            "metadata.0.url": "https://ehealthafrica.github.io/helm-charts/",
                            "name": "eha",
                            "url": "https://ehealthafrica.github.io/helm-charts/"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                }
            },
            "depends_on": []
        }
    ]
}
