{
    "version": 3,
    "terraform_version": "0.11.11",
    "serial": 6,
    "lineage": "68bb1c3d-919d-f6ae-fd8a-db393d4e691e",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                "kubernetes_namespace.namespace": {
                    "type": "kubernetes_namespace",
                    "depends_on": [],
                    "primary": {
                        "id": "axxonet",
                        "attributes": {
                            "id": "axxonet",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "1",
                            "metadata.0.annotations.name": "axxonet",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "axxonet",
                            "metadata.0.resource_version": "9620",
                            "metadata.0.self_link": "/api/v1/namespaces/axxonet",
                            "metadata.0.uid": "b5ca3cb8-40e9-11e9-a5e6-42010a84027b"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "aether_odk"
            ],
            "outputs": {},
            "resources": {
                "data.template_file.override": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "8d59f24d4815ce51c8d574dc9c2395f947efa8138bfe102d431ec8b82603fb0b",
                        "attributes": {
                            "id": "8d59f24d4815ce51c8d574dc9c2395f947efa8138bfe102d431ec8b82603fb0b",
                            "rendered": "environment: \"prod\"\naether:\n  kernel:\n    url: https://kernel.aether-dev.aether-axxonet.com\nodk_url: https://odk.test.aether-axxonet.com\ndomain: aether-axxonet.com\ntrusted_origins: .aether-dev.aether-axxonet.com\nsentry:\n  enabled: false\napp:\n  secret: odk-secrets\n  kernel:\n    secret: kernel-secrets\n  db:\n    host: 127.0.0.1\n    user: aether-dev_odk\n    name: aether-dev_odk\n    secret: database-credentials\n  storage:\n    backend: gcs\n    bucket:\n      name: aether-kernel-example\n      credentialsPath: \"/secrets/gcp/credentials.json\"\n      credentialsSecret: axxonet-bucket-credentials\nservice:\n  type: NodePort\ningress:\n  certsecret: wildcard\n  hosts:\n    - odk.aether-dev.aether-axxonet.com\n  ssl:\n    letsencrypt: true\n    cert_secret: odk.aether-dev.aether-axxonet.com\n  annotations:\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/proxy-body-size: \"75M\"\n    ingress.kubernetes.io/ssl-redirect: \"true\"\n    kubernetes.io/tls-acme: \"true\"\n    certmanager.k8s.io/cluster-issuer: letsencrypt\n    certmanager.k8s.io/acme-challenge-type: dns01\n    certmanager.k8s.io/acme-dns01-provider: gcloud\ndatabase:\n  # set google sql instance name, e.g. modern-rex-207814:europe-west1:gatherdb-instance\n  instance: aether-dev-233810:europe-west1:aether-dev-233810-aether-dev-233810\nprovider:\n  gcp: true\n",
                            "template": "environment: \"prod\"\naether:\n  kernel:\n    url: https://kernel.${project}.${domain}\nodk_url: https://odk.test.${domain}\ndomain: ${domain}\ntrusted_origins: .${project}.${domain}\nsentry:\n  enabled: false\napp:\n  secret: odk-secrets\n  kernel:\n    secret: kernel-secrets\n  db:\n    host: 127.0.0.1\n    user: ${project}_odk\n    name: ${project}_odk\n    secret: database-credentials\n  storage:\n    backend: gcs\n    bucket:\n      name: ${gcs_bucket_name}\n      credentialsPath: \"/secrets/gcp/credentials.json\"\n      credentialsSecret: ${gcs_bucket_credentials}\nservice:\n  type: NodePort\ningress:\n  certsecret: wildcard\n  hosts:\n    - odk.${project}.${domain}\n  ssl:\n    letsencrypt: true\n    cert_secret: odk.${project}.${domain}\n  annotations:\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/proxy-body-size: \"75M\"\n    ingress.kubernetes.io/ssl-redirect: \"true\"\n    kubernetes.io/tls-acme: \"true\"\n    certmanager.k8s.io/cluster-issuer: letsencrypt\n    certmanager.k8s.io/acme-challenge-type: dns01\n    certmanager.k8s.io/acme-dns01-provider: ${dns_provider}\ndatabase:\n  # set google sql instance name, e.g. modern-rex-207814:europe-west1:gatherdb-instance\n  instance: ${database_instance_name}\nprovider:\n  gcp: true\n",
                            "vars.%": "6",
                            "vars.database_instance_name": "aether-dev-233810:europe-west1:aether-dev-233810-aether-dev-233810",
                            "vars.dns_provider": "gcloud",
                            "vars.domain": "aether-axxonet.com",
                            "vars.gcs_bucket_credentials": "axxonet-bucket-credentials",
                            "vars.gcs_bucket_name": "aether-kernel-example",
                            "vars.project": "aether-dev"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "helm_release.service": {
                    "type": "helm_release",
                    "depends_on": [
                        "data.template_file.override"
                    ],
                    "primary": {
                        "id": "aether-odk",
                        "attributes": {
                            "chart": "eha/aether-odk",
                            "disable_webhooks": "false",
                            "force_update": "false",
                            "id": "aether-odk",
                            "metadata.#": "1",
                            "metadata.0.chart": "aether-odk",
                            "metadata.0.name": "aether-odk",
                            "metadata.0.namespace": "axxonet",
                            "metadata.0.revision": "1",
                            "metadata.0.values": "aether:\n  kernel:\n    url: https://kernel.aether-dev.aether-axxonet.com\napp:\n  db:\n    host: 127.0.0.1\n    name: aether-dev_odk\n    secret: database-credentials\n    user: aether-dev_odk\n  kernel:\n    secret: kernel-secrets\n  secret: odk-secrets\n  storage:\n    backend: gcs\n    bucket:\n      credentialsPath: /secrets/gcp/credentials.json\n      credentialsSecret: axxonet-bucket-credentials\n      name: aether-kernel-example\ndatabase:\n  instance: aether-dev-233810:europe-west1:aether-dev-233810-aether-dev-233810\ndomain: aether-axxonet.com\nenvironment: prod\ningress:\n  annotations:\n    certmanager.k8s.io/acme-challenge-type: dns01\n    certmanager.k8s.io/acme-dns01-provider: gcloud\n    certmanager.k8s.io/cluster-issuer: letsencrypt\n    ingress.kubernetes.io/ssl-redirect: \"true\"\n    kubernetes.io/ingress.class: nginx\n    kubernetes.io/tls-acme: \"true\"\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    nginx.ingress.kubernetes.io/proxy-body-size: 75M\n  certsecret: wildcard\n  hosts:\n  - odk.aether-dev.aether-axxonet.com\n  ssl:\n    cert_secret: odk.aether-dev.aether-axxonet.com\n    letsencrypt: true\nodk_url: https://odk.test.aether-axxonet.com\nprovider:\n  gcp: true\nsentry:\n  enabled: false\nservice:\n  type: NodePort\ntrusted_origins: .aether-dev.aether-axxonet.com\n",
                            "metadata.0.version": "1.2.0",
                            "name": "aether-odk",
                            "namespace": "axxonet",
                            "recreate_pods": "false",
                            "reuse": "false",
                            "reuse_values": "false",
                            "status": "DEPLOYED",
                            "timeout": "300",
                            "values.#": "1",
                            "values.0": "environment: \"prod\"\naether:\n  kernel:\n    url: https://kernel.aether-dev.aether-axxonet.com\nodk_url: https://odk.test.aether-axxonet.com\ndomain: aether-axxonet.com\ntrusted_origins: .aether-dev.aether-axxonet.com\nsentry:\n  enabled: false\napp:\n  secret: odk-secrets\n  kernel:\n    secret: kernel-secrets\n  db:\n    host: 127.0.0.1\n    user: aether-dev_odk\n    name: aether-dev_odk\n    secret: database-credentials\n  storage:\n    backend: gcs\n    bucket:\n      name: aether-kernel-example\n      credentialsPath: \"/secrets/gcp/credentials.json\"\n      credentialsSecret: axxonet-bucket-credentials\nservice:\n  type: NodePort\ningress:\n  certsecret: wildcard\n  hosts:\n    - odk.aether-dev.aether-axxonet.com\n  ssl:\n    letsencrypt: true\n    cert_secret: odk.aether-dev.aether-axxonet.com\n  annotations:\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/proxy-body-size: \"75M\"\n    ingress.kubernetes.io/ssl-redirect: \"true\"\n    kubernetes.io/tls-acme: \"true\"\n    certmanager.k8s.io/cluster-issuer: letsencrypt\n    certmanager.k8s.io/acme-challenge-type: dns01\n    certmanager.k8s.io/acme-dns01-provider: gcloud\ndatabase:\n  # set google sql instance name, e.g. modern-rex-207814:europe-west1:gatherdb-instance\n  instance: aether-dev-233810:europe-west1:aether-dev-233810-aether-dev-233810\nprovider:\n  gcp: true\n",
                            "verify": "false",
                            "version": "1.2.0",
                            "wait": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                },
                "helm_repository.eha": {
                    "type": "helm_repository",
                    "depends_on": [],
                    "primary": {
                        "id": "eha",
                        "attributes": {
                            "id": "eha",
                            "metadata.#": "1",
                            "metadata.0.name": "eha",
                            "metadata.0.url": "https://ehealthafrica.github.io/helm-charts/",
                            "name": "eha",
                            "url": "https://ehealthafrica.github.io/helm-charts/"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "gather"
            ],
            "outputs": {},
            "resources": {
                "data.template_file.override": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "a925e7eb8bf9c00336906b32cc35756982fa5f254b7b6edb1ae7432386eb819c",
                        "attributes": {
                            "id": "a925e7eb8bf9c00336906b32cc35756982fa5f254b7b6edb1ae7432386eb819c",
                            "rendered": "# Kaduna override for Gather.\ngather:\n  repository: \"ehealthafrica/gather\"\nenvironment: prod\nprovider:\n  aws: false\n  gcp: true\ndomain: aether-dev.aether-axxonet.com\ntrusted_origins: gather.aether-dev.aether-axxonet.com\nservice:\n  type: NodePort\ningress:\n  certsecret: wildcard\n  hosts:\n    - gather.aether-dev.aether-axxonet.com\n  ssl:\n    letsencrypt: true\n    cert_secret: aether-dev.aether-axxonet.com\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    nginx.ingress.kubernetes.io/proxy-body-size: \"75M\"\n    kubernetes.io/tls-acme: \"true\"\n    certmanager.k8s.io/cluster-issuer: letsencrypt\n    certmanager.k8s.io/acme-challenge-type: dns01\n    certmanager.k8s.io/acme-dns01-provider: gcloud\naether_modules: odk,kernel\naether:\n  kernel:\n    secret: kernel-secrets\n    url: https://kernel.aether-dev.aether-axxonet.com\n  odk:\n    enabled: true\n    secret: odk-secrets\n    url: https://odk.aether-dev.aether-axxonet.com\napp:\n  db:\n    secret: database-credentials\n    user: gather\n    name: gather\ndatabase:\n  # set google sql instance name, e.g. modern-rex-207814:europe-west1:gatherdb-instance\n  instance: aether-dev-233810:europe-west1:aether-dev-233810-aether-dev-233810\n",
                            "template": "# Kaduna override for Gather.\ngather:\n  repository: \"ehealthafrica/gather\"\nenvironment: prod\nprovider:\n  aws: false\n  gcp: true\ndomain: ${project}.${domain}\ntrusted_origins: gather.${project}.${domain}\nservice:\n  type: NodePort\ningress:\n  certsecret: wildcard\n  hosts:\n    - gather.${project}.${domain}\n  ssl:\n    letsencrypt: true\n    cert_secret: ${project}.${domain}\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    nginx.ingress.kubernetes.io/proxy-body-size: \"75M\"\n    kubernetes.io/tls-acme: \"true\"\n    certmanager.k8s.io/cluster-issuer: letsencrypt\n    certmanager.k8s.io/acme-challenge-type: dns01\n    certmanager.k8s.io/acme-dns01-provider: ${dns_provider}\naether_modules: odk,kernel\naether:\n  kernel:\n    secret: kernel-secrets\n    url: https://kernel.${project}.${domain}\n  odk:\n    enabled: true\n    secret: odk-secrets\n    url: https://odk.${project}.${domain}\napp:\n  db:\n    secret: database-credentials\n    user: gather\n    name: gather\ndatabase:\n  # set google sql instance name, e.g. modern-rex-207814:europe-west1:gatherdb-instance\n  instance: ${database_instance_name}\n",
                            "vars.%": "6",
                            "vars.database_instance_name": "aether-dev-233810:europe-west1:aether-dev-233810-aether-dev-233810",
                            "vars.dns_provider": "gcloud",
                            "vars.domain": "aether-axxonet.com",
                            "vars.gcs_bucket_credentials": "",
                            "vars.gcs_bucket_name": "",
                            "vars.project": "aether-dev"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "helm_release.service": {
                    "type": "helm_release",
                    "depends_on": [
                        "data.template_file.override"
                    ],
                    "primary": {
                        "id": "gather",
                        "attributes": {
                            "chart": "eha/gather",
                            "disable_webhooks": "false",
                            "force_update": "false",
                            "id": "gather",
                            "metadata.#": "1",
                            "metadata.0.chart": "gather",
                            "metadata.0.name": "gather",
                            "metadata.0.namespace": "axxonet",
                            "metadata.0.revision": "2",
                            "metadata.0.values": "aether:\n  kernel:\n    secret: kernel-secrets\n    url: https://kernel.aether-dev.aether-axxonet.com\n  odk:\n    enabled: true\n    secret: odk-secrets\n    url: https://odk.aether-dev.aether-axxonet.com\naether_modules: odk,kernel\napp:\n  db:\n    name: gather\n    secret: database-credentials\n    user: gather\ndatabase:\n  instance: aether-dev-233810:europe-west1:aether-dev-233810-aether-dev-233810\ndomain: aether-dev.aether-axxonet.com\nenvironment: prod\ngather:\n  repository: ehealthafrica/gather\ningress:\n  annotations:\n    certmanager.k8s.io/acme-challenge-type: dns01\n    certmanager.k8s.io/acme-dns01-provider: gcloud\n    certmanager.k8s.io/cluster-issuer: letsencrypt\n    kubernetes.io/ingress.class: nginx\n    kubernetes.io/tls-acme: \"true\"\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    nginx.ingress.kubernetes.io/proxy-body-size: 75M\n  certsecret: wildcard\n  hosts:\n  - gather.aether-dev.aether-axxonet.com\n  ssl:\n    cert_secret: aether-dev.aether-axxonet.com\n    letsencrypt: true\nprovider:\n  aws: false\n  gcp: true\nservice:\n  type: NodePort\ntrusted_origins: gather.aether-dev.aether-axxonet.com\n",
                            "metadata.0.version": "3.1.0",
                            "name": "gather",
                            "namespace": "axxonet",
                            "recreate_pods": "false",
                            "reuse": "false",
                            "reuse_values": "false",
                            "status": "DEPLOYED",
                            "timeout": "300",
                            "values.#": "1",
                            "values.0": "# Kaduna override for Gather.\ngather:\n  repository: \"ehealthafrica/gather\"\nenvironment: prod\nprovider:\n  aws: false\n  gcp: true\ndomain: aether-dev.aether-axxonet.com\ntrusted_origins: gather.aether-dev.aether-axxonet.com\nservice:\n  type: NodePort\ningress:\n  certsecret: wildcard\n  hosts:\n    - gather.aether-dev.aether-axxonet.com\n  ssl:\n    letsencrypt: true\n    cert_secret: aether-dev.aether-axxonet.com\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    nginx.ingress.kubernetes.io/proxy-body-size: \"75M\"\n    kubernetes.io/tls-acme: \"true\"\n    certmanager.k8s.io/cluster-issuer: letsencrypt\n    certmanager.k8s.io/acme-challenge-type: dns01\n    certmanager.k8s.io/acme-dns01-provider: gcloud\naether_modules: odk,kernel\naether:\n  kernel:\n    secret: kernel-secrets\n    url: https://kernel.aether-dev.aether-axxonet.com\n  odk:\n    enabled: true\n    secret: odk-secrets\n    url: https://odk.aether-dev.aether-axxonet.com\napp:\n  db:\n    secret: database-credentials\n    user: gather\n    name: gather\ndatabase:\n  # set google sql instance name, e.g. modern-rex-207814:europe-west1:gatherdb-instance\n  instance: aether-dev-233810:europe-west1:aether-dev-233810-aether-dev-233810\n",
                            "verify": "false",
                            "version": "3.1.0",
                            "wait": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                },
                "helm_repository.eha": {
                    "type": "helm_repository",
                    "depends_on": [],
                    "primary": {
                        "id": "eha",
                        "attributes": {
                            "id": "eha",
                            "metadata.#": "1",
                            "metadata.0.name": "eha",
                            "metadata.0.url": "https://ehealthafrica.github.io/helm-charts/",
                            "name": "eha",
                            "url": "https://ehealthafrica.github.io/helm-charts/"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "system_modules"
            ],
            "outputs": {},
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "system_modules",
                "cert-manager"
            ],
            "outputs": {},
            "resources": {
                "data.template_file.issuer": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "71e117c01284e6f5fcfcc750d615cadfb8a14d71be36b45ac6f6be223ed36577",
                        "attributes": {
                            "id": "71e117c01284e6f5fcfcc750d615cadfb8a14d71be36b45ac6f6be223ed36577",
                            "rendered": "apiVersion: certmanager.k8s.io/v1alpha1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt\n  namespace: axxonet\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: rajehs.k@axxonet.net\n\n    # Name of a secret used to store the ACME account private key\n    privateKeySecretRef:\n      name: aether-axxonet.com-wildcard-key\n    http01: {}\n    # ACME DNS-01 provider configurations\n    dns01:\n      providers:\n        - name: clouddns\n          clouddns:\n            serviceAccountSecretRef:\n              name: clouddns-service-account\n              key: aether-dev-233810-e3dca51fb659.json\n            project: aether-dev-233810\n",
                            "template": "apiVersion: certmanager.k8s.io/v1alpha1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt\n  namespace: axxonet\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: ${email_address}\n\n    # Name of a secret used to store the ACME account private key\n    privateKeySecretRef:\n      name: ${domain}-wildcard-key\n    http01: {}\n    # ACME DNS-01 provider configurations\n    dns01:\n      providers:\n        - name: clouddns\n          clouddns:\n            serviceAccountSecretRef:\n              name: clouddns-service-account\n              key: aether-dev-233810-e3dca51fb659.json\n            project: aether-dev-233810\n",
                            "vars.%": "3",
                            "vars.domain": "aether-axxonet.com",
                            "vars.email_address": "rajehs.k@axxonet.net",
                            "vars.namespace": "kube-system"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "helm_release.cert-manager": {
                    "type": "helm_release",
                    "depends_on": [],
                    "primary": {
                        "id": "cert-manager",
                        "attributes": {
                            "chart": "stable/cert-manager",
                            "disable_webhooks": "false",
                            "force_update": "false",
                            "id": "cert-manager",
                            "metadata.#": "1",
                            "metadata.0.chart": "cert-manager",
                            "metadata.0.name": "cert-manager",
                            "metadata.0.namespace": "kube-system",
                            "metadata.0.revision": "1",
                            "metadata.0.values": "{}\n",
                            "metadata.0.version": "v0.5.2",
                            "name": "cert-manager",
                            "namespace": "kube-system",
                            "recreate_pods": "false",
                            "reuse": "false",
                            "reuse_values": "false",
                            "status": "DEPLOYED",
                            "timeout": "300",
                            "verify": "false",
                            "version": "v0.5.2",
                            "wait": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                },
                "local_file.issuer": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.issuer"
                    ],
                    "primary": {
                        "id": "2234cc38d18334a4e22763571bdc0d700909ec83",
                        "attributes": {
                            "content": "apiVersion: certmanager.k8s.io/v1alpha1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt\n  namespace: axxonet\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: rajehs.k@axxonet.net\n\n    # Name of a secret used to store the ACME account private key\n    privateKeySecretRef:\n      name: aether-axxonet.com-wildcard-key\n    http01: {}\n    # ACME DNS-01 provider configurations\n    dns01:\n      providers:\n        - name: clouddns\n          clouddns:\n            serviceAccountSecretRef:\n              name: clouddns-service-account\n              key: aether-dev-233810-e3dca51fb659.json\n            project: aether-dev-233810\n",
                            "filename": "/home/kiran/Gather/aether-infrastructure-provisioning-chore-initial-commit/examples/services/ssl/issuer.yaml",
                            "id": "2234cc38d18334a4e22763571bdc0d700909ec83"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "system_modules",
                "dashboard"
            ],
            "outputs": {},
            "resources": {
                "helm_release.kubernetes-dashboard": {
                    "type": "helm_release",
                    "depends_on": [],
                    "primary": {
                        "id": "kubernetes-dashboard",
                        "attributes": {
                            "chart": "stable/kubernetes-dashboard",
                            "disable_webhooks": "false",
                            "force_update": "false",
                            "id": "kubernetes-dashboard",
                            "metadata.#": "1",
                            "metadata.0.chart": "kubernetes-dashboard",
                            "metadata.0.name": "kubernetes-dashboard",
                            "metadata.0.namespace": "kube-system",
                            "metadata.0.revision": "1",
                            "metadata.0.values": "{}\n",
                            "metadata.0.version": "1.2.0",
                            "name": "kubernetes-dashboard",
                            "namespace": "kube-system",
                            "recreate_pods": "false",
                            "reuse": "false",
                            "reuse_values": "false",
                            "status": "DEPLOYED",
                            "timeout": "300",
                            "verify": "false",
                            "version": "1.2.0",
                            "wait": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                },
                "helm_release.metrics": {
                    "type": "helm_release",
                    "depends_on": [],
                    "primary": {
                        "id": "kubernetes-state-metrics",
                        "attributes": {
                            "chart": "stable/kube-state-metrics",
                            "disable_webhooks": "false",
                            "force_update": "false",
                            "id": "kubernetes-state-metrics",
                            "metadata.#": "1",
                            "metadata.0.chart": "kube-state-metrics",
                            "metadata.0.name": "kubernetes-state-metrics",
                            "metadata.0.namespace": "kube-system",
                            "metadata.0.revision": "1",
                            "metadata.0.values": "{}\n",
                            "metadata.0.version": "0.13.1",
                            "name": "kubernetes-state-metrics",
                            "namespace": "kube-system",
                            "recreate_pods": "false",
                            "reuse": "false",
                            "reuse_values": "false",
                            "status": "DEPLOYED",
                            "timeout": "300",
                            "verify": "false",
                            "version": "0.13.1",
                            "wait": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                },
                "kubernetes_cluster_role.dashboard": {
                    "type": "kubernetes_cluster_role",
                    "depends_on": [],
                    "primary": {
                        "id": "kubernetes-dashboard-minimal",
                        "attributes": {
                            "id": "kubernetes-dashboard-minimal",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "kubernetes-dashboard-minimal",
                            "metadata.0.resource_version": "9630",
                            "metadata.0.self_link": "/apis/rbac.authorization.k8s.io/v1/clusterroles/kubernetes-dashboard-minimal",
                            "metadata.0.uid": "b600bcc2-40e9-11e9-a5e6-42010a84027b",
                            "rule.#": "12",
                            "rule.0.api_groups.#": "1",
                            "rule.0.api_groups.0": "",
                            "rule.0.non_resource_urls.#": "0",
                            "rule.0.resource_names.#": "0",
                            "rule.0.resources.#": "11",
                            "rule.0.resources.0": "pods",
                            "rule.0.resources.1": "configmaps",
                            "rule.0.resources.10": "persistentvolumes",
                            "rule.0.resources.2": "deployments",
                            "rule.0.resources.3": "persistentvolumeclaims",
                            "rule.0.resources.4": "replicationcontrollers",
                            "rule.0.resources.5": "replicationcontrollers/scale",
                            "rule.0.resources.6": "serviceaccounts",
                            "rule.0.resources.7": "services",
                            "rule.0.resources.8": "nodes",
                            "rule.0.resources.9": "persistentvolumeclaims",
                            "rule.0.verbs.#": "3",
                            "rule.0.verbs.0": "get",
                            "rule.0.verbs.1": "watch",
                            "rule.0.verbs.2": "list",
                            "rule.1.api_groups.#": "1",
                            "rule.1.api_groups.0": "",
                            "rule.1.non_resource_urls.#": "0",
                            "rule.1.resource_names.#": "0",
                            "rule.1.resources.#": "9",
                            "rule.1.resources.0": "bindings",
                            "rule.1.resources.1": "events",
                            "rule.1.resources.2": "limitranges",
                            "rule.1.resources.3": "namespaces/status",
                            "rule.1.resources.4": "pods/log",
                            "rule.1.resources.5": "pods/status",
                            "rule.1.resources.6": "replicationcontrollers/status",
                            "rule.1.resources.7": "resourcequotas",
                            "rule.1.resources.8": "resourcequotas/status",
                            "rule.1.verbs.#": "3",
                            "rule.1.verbs.0": "get",
                            "rule.1.verbs.1": "watch",
                            "rule.1.verbs.2": "list",
                            "rule.10.api_groups.#": "1",
                            "rule.10.api_groups.0": "policy",
                            "rule.10.non_resource_urls.#": "0",
                            "rule.10.resource_names.#": "0",
                            "rule.10.resources.#": "1",
                            "rule.10.resources.0": "poddisruptionbudgets",
                            "rule.10.verbs.#": "3",
                            "rule.10.verbs.0": "get",
                            "rule.10.verbs.1": "watch",
                            "rule.10.verbs.2": "list",
                            "rule.11.api_groups.#": "1",
                            "rule.11.api_groups.0": "",
                            "rule.11.non_resource_urls.#": "0",
                            "rule.11.resource_names.#": "3",
                            "rule.11.resource_names.0": "heapster",
                            "rule.11.resource_names.1": "http:heapster:",
                            "rule.11.resource_names.2": "https:heapster:",
                            "rule.11.resources.#": "1",
                            "rule.11.resources.0": "services/proxy",
                            "rule.11.verbs.#": "1",
                            "rule.11.verbs.0": "get",
                            "rule.2.api_groups.#": "1",
                            "rule.2.api_groups.0": "",
                            "rule.2.non_resource_urls.#": "0",
                            "rule.2.resource_names.#": "0",
                            "rule.2.resources.#": "1",
                            "rule.2.resources.0": "namespaces",
                            "rule.2.verbs.#": "3",
                            "rule.2.verbs.0": "get",
                            "rule.2.verbs.1": "watch",
                            "rule.2.verbs.2": "list",
                            "rule.3.api_groups.#": "1",
                            "rule.3.api_groups.0": "apps",
                            "rule.3.non_resource_urls.#": "0",
                            "rule.3.resource_names.#": "0",
                            "rule.3.resources.#": "6",
                            "rule.3.resources.0": "daemonsets",
                            "rule.3.resources.1": "deployments",
                            "rule.3.resources.2": "deployments/scale",
                            "rule.3.resources.3": "replicasets",
                            "rule.3.resources.4": "replicasets/scale",
                            "rule.3.resources.5": "statefulsets",
                            "rule.3.verbs.#": "3",
                            "rule.3.verbs.0": "get",
                            "rule.3.verbs.1": "watch",
                            "rule.3.verbs.2": "list",
                            "rule.4.api_groups.#": "1",
                            "rule.4.api_groups.0": "batch",
                            "rule.4.non_resource_urls.#": "0",
                            "rule.4.resource_names.#": "0",
                            "rule.4.resources.#": "2",
                            "rule.4.resources.0": "cronjobs",
                            "rule.4.resources.1": "jobs",
                            "rule.4.verbs.#": "3",
                            "rule.4.verbs.0": "get",
                            "rule.4.verbs.1": "watch",
                            "rule.4.verbs.2": "list",
                            "rule.5.api_groups.#": "1",
                            "rule.5.api_groups.0": "autoscaling",
                            "rule.5.non_resource_urls.#": "0",
                            "rule.5.resource_names.#": "0",
                            "rule.5.resources.#": "1",
                            "rule.5.resources.0": "horizontalpodautoscalers",
                            "rule.5.verbs.#": "3",
                            "rule.5.verbs.0": "get",
                            "rule.5.verbs.1": "watch",
                            "rule.5.verbs.2": "list",
                            "rule.6.api_groups.#": "1",
                            "rule.6.api_groups.0": "",
                            "rule.6.non_resource_urls.#": "0",
                            "rule.6.resource_names.#": "3",
                            "rule.6.resource_names.0": "heapster",
                            "rule.6.resource_names.1": "http:heapster:",
                            "rule.6.resource_names.2": "https:heapster:",
                            "rule.6.resources.#": "1",
                            "rule.6.resources.0": "services/proxy",
                            "rule.6.verbs.#": "1",
                            "rule.6.verbs.0": "get",
                            "rule.7.api_groups.#": "1",
                            "rule.7.api_groups.0": "networking.k8s.io",
                            "rule.7.non_resource_urls.#": "0",
                            "rule.7.resource_names.#": "0",
                            "rule.7.resources.#": "1",
                            "rule.7.resources.0": "networkpolicies",
                            "rule.7.verbs.#": "3",
                            "rule.7.verbs.0": "get",
                            "rule.7.verbs.1": "watch",
                            "rule.7.verbs.2": "list",
                            "rule.8.api_groups.#": "1",
                            "rule.8.api_groups.0": "storage.k8s.io",
                            "rule.8.non_resource_urls.#": "0",
                            "rule.8.resource_names.#": "0",
                            "rule.8.resources.#": "2",
                            "rule.8.resources.0": "storageclasses",
                            "rule.8.resources.1": "volumeattachments",
                            "rule.8.verbs.#": "3",
                            "rule.8.verbs.0": "get",
                            "rule.8.verbs.1": "watch",
                            "rule.8.verbs.2": "list",
                            "rule.9.api_groups.#": "1",
                            "rule.9.api_groups.0": "rbac.authorization.k8s.io",
                            "rule.9.non_resource_urls.#": "0",
                            "rule.9.resource_names.#": "0",
                            "rule.9.resources.#": "4",
                            "rule.9.resources.0": "clusterrolebindings",
                            "rule.9.resources.1": "clusterroles",
                            "rule.9.resources.2": "roles",
                            "rule.9.resources.3": "rolebindings",
                            "rule.9.verbs.#": "3",
                            "rule.9.verbs.0": "get",
                            "rule.9.verbs.1": "watch",
                            "rule.9.verbs.2": "list"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_cluster_role_binding.dashboard": {
                    "type": "kubernetes_cluster_role_binding",
                    "depends_on": [
                        "kubernetes_service_account.dashboard"
                    ],
                    "primary": {
                        "id": "kubernetes-dashboard-minimal",
                        "attributes": {
                            "id": "kubernetes-dashboard-minimal",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "kubernetes-dashboard-minimal",
                            "metadata.0.resource_version": "9658",
                            "metadata.0.self_link": "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/kubernetes-dashboard-minimal",
                            "metadata.0.uid": "b7d8bf30-40e9-11e9-a5e6-42010a84027b",
                            "role_ref.%": "3",
                            "role_ref.api_group": "rbac.authorization.k8s.io",
                            "role_ref.kind": "ClusterRole",
                            "role_ref.name": "kubernetes-dashboard-minimal",
                            "subject.#": "1",
                            "subject.0.api_group": "",
                            "subject.0.kind": "ServiceAccount",
                            "subject.0.name": "kubernetes-dashboard-minimal",
                            "subject.0.namespace": "kube-system"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                },
                "kubernetes_service_account.dashboard": {
                    "type": "kubernetes_service_account",
                    "depends_on": [],
                    "primary": {
                        "id": "kube-system/kubernetes-dashboard-minimal",
                        "attributes": {
                            "automount_service_account_token": "false",
                            "default_secret_name": "kubernetes-dashboard-minimal-token-jp45j",
                            "id": "kube-system/kubernetes-dashboard-minimal",
                            "image_pull_secret.#": "0",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "kubernetes-dashboard-minimal",
                            "metadata.0.namespace": "kube-system",
                            "metadata.0.resource_version": "9633",
                            "metadata.0.self_link": "/api/v1/namespaces/kube-system/serviceaccounts/kubernetes-dashboard-minimal",
                            "metadata.0.uid": "b6016958-40e9-11e9-a5e6-42010a84027b",
                            "secret.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "system_modules",
                "external-dns"
            ],
            "outputs": {},
            "resources": {
                "google_dns_managed_zone.prod": {
                    "type": "google_dns_managed_zone",
                    "depends_on": [],
                    "primary": {
                        "id": "prod-zone",
                        "attributes": {
                            "description": "Managed by Terraform",
                            "dns_name": "aether-axxonet.com.",
                            "id": "prod-zone",
                            "labels.%": "0",
                            "name": "prod-zone",
                            "name_servers.#": "4",
                            "name_servers.0": "ns-cloud-c1.googledomains.com.",
                            "name_servers.1": "ns-cloud-c2.googledomains.com.",
                            "name_servers.2": "ns-cloud-c3.googledomains.com.",
                            "name_servers.3": "ns-cloud-c4.googledomains.com.",
                            "project": "aether-dev-233810"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 240000000000,
                                "delete": 240000000000,
                                "update": 240000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.google"
                },
                "helm_release.external-dns": {
                    "type": "helm_release",
                    "depends_on": [],
                    "primary": {
                        "id": "external-dns",
                        "attributes": {
                            "chart": "stable/external-dns",
                            "disable_webhooks": "false",
                            "force_update": "false",
                            "id": "external-dns",
                            "metadata.#": "1",
                            "metadata.0.chart": "external-dns",
                            "metadata.0.name": "external-dns",
                            "metadata.0.namespace": "kube-system",
                            "metadata.0.revision": "1",
                            "metadata.0.values": "{}\n",
                            "metadata.0.version": "1.3.3",
                            "name": "external-dns",
                            "namespace": "kube-system",
                            "recreate_pods": "false",
                            "reuse": "false",
                            "reuse_values": "false",
                            "status": "DEPLOYED",
                            "timeout": "300",
                            "verify": "false",
                            "version": "1.3.3",
                            "wait": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                },
                "kubernetes_secret.secret": {
                    "type": "kubernetes_secret",
                    "depends_on": [],
                    "primary": {
                        "id": "kube-system/basic-auth",
                        "attributes": {
                            "data.%": "2",
                            "data.password": "postgres",
                            "data.username": "admin",
                            "id": "kube-system/basic-auth",
                            "metadata.#": "1",
                            "metadata.0.annotations.%": "0",
                            "metadata.0.generate_name": "",
                            "metadata.0.generation": "0",
                            "metadata.0.labels.%": "0",
                            "metadata.0.name": "basic-auth",
                            "metadata.0.namespace": "kube-system",
                            "metadata.0.resource_version": "9642",
                            "metadata.0.self_link": "/api/v1/namespaces/kube-system/secrets/basic-auth",
                            "metadata.0.uid": "b62d4689-40e9-11e9-a5e6-42010a84027b",
                            "type": "kubernetes.io/basic-auth"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.kubernetes"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "system_modules",
                "nginx"
            ],
            "outputs": {},
            "resources": {
                "helm_release.nginx-ingress": {
                    "type": "helm_release",
                    "depends_on": [],
                    "primary": {
                        "id": "nginx-ingress",
                        "attributes": {
                            "chart": "stable/nginx-ingress",
                            "disable_webhooks": "false",
                            "force_update": "false",
                            "id": "nginx-ingress",
                            "metadata.#": "1",
                            "metadata.0.chart": "nginx-ingress",
                            "metadata.0.name": "nginx-ingress",
                            "metadata.0.namespace": "kube-system",
                            "metadata.0.revision": "1",
                            "metadata.0.values": "controller:\n  extraArgs:\n    v: 3\n  publishService:\n    enabled: true\n  service:\n    externalTrafficPolicy: Local\nmetrics:\n  enabled: true\nrbac:\n  create: true\n",
                            "metadata.0.version": "1.3.0",
                            "name": "nginx-ingress",
                            "namespace": "kube-system",
                            "recreate_pods": "false",
                            "reuse": "false",
                            "reuse_values": "false",
                            "set.#": "5",
                            "set.1522582568.name": "rbac.create",
                            "set.1522582568.value": "true",
                            "set.208491455.name": "metrics.enabled",
                            "set.208491455.value": "true",
                            "set.2425632378.name": "controller.publishService.enabled",
                            "set.2425632378.value": "true",
                            "set.478555258.name": "controller.extraArgs.v",
                            "set.478555258.value": "3",
                            "set.61224834.name": "controller.service.externalTrafficPolicy",
                            "set.61224834.value": "Local",
                            "status": "DEPLOYED",
                            "timeout": "300",
                            "verify": "false",
                            "version": "1.3.0",
                            "wait": "true"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.helm"
                }
            },
            "depends_on": []
        }
    ]
}
